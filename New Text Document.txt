Durjoy Talukdar10:04 PM
const express = require('express');
const app = express();
require('dotenv').config();

const mongoose = require('mongoose');

// require all routers 

app.use(express.json()); 

app.get('/', (req, res) => {
    res.send(`<h1> I am from root </h1>`)
})

// Database connection 
const url = process.env.MONGO_URL;
mongoose.connect(url, {
    useNewUrlParser: true, useUnifiedTopology: true, useCreateIndex: true
})
    .then(() => console.log('mongodb server connected...'))
    .catch(err => console.
 .catch(err => console.log(err))

// app.use('/user', userRouter)
const port = process.env.PORT || 5000;
app.listen(port, () => console.log(`server listening on port ${port}`))
=====================
const express = require('express');
const app = express();
require('dotenv').config();

const mongoose = require('mongoose');

// require all routers 

app.use(express.json()); 

app.get('/', (req, res) => {
    res.send(`<h1> I am from root </h1>`)
})
Durjoy Talukdar10:05 PM
// Database connection 
const url = process.env.MONGO_URL;
mongoose.connect(url, {
    useNewUrlParser: true, useUnifiedTopology: true, useCreateIndex: true
})
    .then(() => console.log('mongodb server connected...'))
    .catch(err => console.log(err))

// app.use('/user', userRouter)
const port = process.env.PORT || 5000;
app.listen(port, () => console.log(`server listening on port ${port}`))
Md Iftakher Hossain10:28 PM
done
Al Imran Hossain10:29 PM
done
Durjoy Talukdar10:30 PM
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const userSchema = new Schema({
    userName: String,
    userType: {
        type: String,
        enum: ["student", "teacher", "librarian"],
        default: "student"
    },
    email: {
        type: String,
        unique: true
    },
    password: String
});

module.exports = mongoose.model('User', userSchema);
Md Iftakher Hossain10:32 PM
done
Al Imran Hossain10:33 PM
done
Durjoy Talukdar10:34 PM
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const librarySchema = new Schema({
    bookName: String,
    author: String,
    releaseDate: {
        type: Date,
        default: Date.now
    },
    bookImage: String,
    bookFile: String,
isActivated: {
        type: Boolean,
        default: false
    },
    isDeleted: {
        type: Boolean,
        default: false
    }
})
module.exports = mongoose.model('Library', librarySchema);
Durjoy Talukdar10:55 PM
^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
Durjoy Talukdar11:05 PM
^[a-zA-Z0-9]{4,30}$
==========================
const userValidator = Joi.object({
    userName: Joi.string().required()
    .alphanum().min(4).max(15),
    userType: Joi.string(),
    email: Joi.string().trim().required()
    .pattern(new RegExp('^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$')),
    password: Joi.string().required()
        .pattern(new RegExp('^[a-zA-Z0-9]{4,30}$'))
})
Durjoy Talukdar11:06 PM
const options = {
    abortEarly: false,
    allowUnknown: true,
    stripUnknown: true
};


module.exports = {
    userValidator,
    options
}
Md Iftakher Hossain11:07 PM
done